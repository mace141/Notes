// [[[[[[[[[[[[[[[[[[[[[[[[[ Intro to CSS                        ]]]]]]]]]]]]]]]]]]]]]]]]]
// ========================= Adding Style to HTML                =========================
// ------------------------- Inline Style Attribute              -------------------------
// ------------------------- Internal: Embedded Style Tag        -------------------------
// ------------------------- External File: Linked Stylesheet    -------------------------
// ========================= CSS Terms                           =========================
// [[[[[[[[[[[[[[[[[[[[[[[[[ Selectors & Precedence              ]]]]]]]]]]]]]]]]]]]]]]]]]
// ========================= CSS Syntax                          =========================
// ========================= Cascading Styles                    =========================
// ========================= Basic Selectors                     =========================
// ------------------------- Element Selector                    -------------------------
// ------------------------- Descendant Selector                 -------------------------
// ------------------------- Child Selector                      -------------------------
// ------------------------- Class Selector                      -------------------------
// ------------------------- ID Selector                         -------------------------
// ------------------------- Universal Selector                  -------------------------
// ========================= Overspecificity                     =========================
// ========================= Precedence                          =========================
// [[[[[[[[[[[[[[[[[[[[[[[[[ Advanced Selectors                  ]]]]]]]]]]]]]]]]]]]]]]]]]
// ========================= Attribute Selectors                 =========================
// ========================= Pseudo Selectors                    =========================
// ------------------------- State Selector                      -------------------------
// ========================= Structural Selectors                =========================
// ========================= Combinators                         =========================
// [[[[[[[[[[[[[[[[[[[[[[[[[ Box Model                           ]]]]]]]]]]]]]]]]]]]]]]]]]
// [[[[[[[[[[[[[[[[[[[[[[[[[ Reset Stylesheet                    ]]]]]]]]]]]]]]]]]]]]]]]]]
// [[[[[[[[[[[[[[[[[[[[[[[[[ Box Model                           ]]]]]]]]]]]]]]]]]]]]]]]]]
// [[[[[[[[[[[[[[[[[[[[[[[[[ Display Property                    ]]]]]]]]]]]]]]]]]]]]]]]]]
// [[[[[[[[[[[[[[[[[[[[[[[[[ Inherit                             ]]]]]]]]]]]]]]]]]]]]]]]]]
// [[[[[[[[[[[[[[[[[[[[[[[[[ Resets                              ]]]]]]]]]]]]]]]]]]]]]]]]]
// [[[[[[[[[[[[[[[[[[[[[[[[[ Float and Clearfix                  ]]]]]]]]]]]]]]]]]]]]]]]]]
// [[[[[[[[[[[[[[[[[[[[[[[[[ Flexbox and Grid System             ]]]]]]]]]]]]]]]]]]]]]]]]]
// [[[[[[[[[[[[[[[[[[[[[[[[[ Responsive Design                   ]]]]]]]]]]]]]]]]]]]]]]]]]
// ========================= Media Query                         =========================
// ========================= Viewport Meta Tag                   =========================
// ========================= Reset                               =========================
// ========================= Position Property                   =========================
// ========================= Dropdowns                           =========================
// ========================= Transform                           =========================

// $$$$$$$$$$$$$$$$$$$$$$$$$ W2D5 $$$$$$$$$$$$$$$$$$$$$$$$$

// [[[[[[[[[[[[[[[[[[[[[[[[[ Intro to CSS ]]]]]]]]]]]]]]]]]]]]]]]]]

// https://open.appacademy.io/learn/swe-in-person/software-engineering-foundations/css-nontechnical-overview

// CSS is short for Cascading Stylesheets. It is a stylesheet language for markup
//   (XML, HTML, XHTML)
// CSS combines multiple files to style one page

// ========================= Adding Style to HTML =========================

// There are three ways a devleoper may add style to an HTML document. They are 
//   listed below in order of increasing specificity

#1 External
#2 Internal
#3 Inline 

// ------------------------- Inline Style Attribute -------------------------

<h2 style="color: #000000; font-size: 2em;"> Hi </h2>

// Pros: 
    // Highest specificity: ensures the style will be applied to the element

// Cons: 
    // Highest specificity: will overwrite most other styles in an internal or external sheet 
    // Redundant; not DRY
    // Cluttered, unreadable HTML markup 
    // Difficult to manage
    // Impossible to style pseudo-elements and classes like visited, hover, and active

// When you change an element's style using Javascript, it affects the element's 
//   inline style and can overwrite existing inline styles permanently

// ------------------------- Internal: Embedded Style Tag -------------------------

// Style for many elements are collected between <style> tags in the <head> 
//   section of an HTML document 

<head>
  <style type="text/css">

   h2 {
     color: #000000;
     font-size: 2em;
   }

   h3 {
     color: #FF69B4;
     font-size: 1em;
   }

  </style>
</head>

// Pros: 
    // Cleaner HTML markup than inline styles: all styles are in one section of the document
    // Selector apply styles to multiple elements on a page
        // Smaller page size than using all inline styles
        // More DRY than inline styles 
    // Apply styles to the document they are embedded within; not globally

// Cons: 
    // Loaded with the HTML page and not cached by the browser

// ------------------------- External File: Linked Stylesheet -------------------------

// An external stylesheet is simply a file dedicated to CSS, that must be linked
//   in the <head> section of an HTML document 

<link rel="stylesheet" type="text/css" href="styles.css" />

// Pros: 
    // Can be cached by browsers for improved performance
    // Global: can be used across pages in your site 

// Cons: 
    // Global: the developer must structure the CSS so that styles are not 
    //         applied to elements they are not intended for 

// ========================= CSS Terms =========================

// UI: User Interface
// Responsive: a web design that adjusts to different device screen sizes
    // Breakpoint: the markers at which a change will occur to improve the UI
    //             Ex: "Please add a breakpoint so the picture grid on this page has four
    //                  columns on wide screens and three columns on screens less than 1024px wide."
    // Media queries: Used for device-specific breakpoints. The include an optional
    //                media type and expressions that limit the scope of their contained styles 
    //                Ex: smartphone, tablet, PC screens 
// Pixel Perfect: replicating a mockup perfectly
    // Flat design: minimalist UI design language characterized by simple elements, subtle typography, and flat colors 
    // Skeumorphism: a design language characterized by elements that look like their counterparts in the real world 
    // Grid system: a simple type of CSS framework that provides column systems for grid layouts, usually helpful for 
    //              responsive designs
// W3C: the group responsible for HTML and CSS standards - it is the largest standards body for Internet design and best practices

// [[[[[[[[[[[[[[[[[[[[[[[[[ Selectors & Precedence ]]]]]]]]]]]]]]]]]]]]]]]]]

// https://open.appacademy.io/learn/swe-in-person/software-engineering-foundations/css-selectors---precedence

// ========================= CSS Syntax =========================

// This is the syntax of a single style declaration in your stylesheet 

selector {
    property: value;
}

// This is how to style all <p> elements with blue, bold, sans-serif font 

p {
    font-family: sans-serif;
    font-weight: bold;
    color: blue;
}

// ========================= Cascading Styles =========================

p {
    color: black;
}

p span {
    font-weight: bold;
}

p span.highlight {
    color: yellow;
}

<p>
    This is some text in a paragraph element. 
  
    <span>
        This text has been styled bold because it is in a span element 
        that's a child of a paragraph element.
    </span>
  
    <span class="highlight">
        This text is yellow because the class selector overrides 
        the tag selector when multiple style declarations apply to the same
        attribute (`color`) of the same element. It's still bold though!
    </span>
</p>

// ========================= Basic Selectors =========================

// ------------------------- Element Selector -------------------------

// You can select HTML elements by stating their name 

h1 {
    font-size: 24px;
}

// ------------------------- Descendant Selector -------------------------

// You can select descendants by adding a space between the parent and the child 

// This selects all <a> elements that are descendants of <ul> elements and removes all text-decoration 

<ul>
    <li><a href="example.com">Style Me!</a></li>
</ul>

ul a {
    text-decoration: none; /* This assures the a elements are not underlined */
}

// ------------------------- Child Selector -------------------------

// This is similar to the descendant selector except you have to add a > between the parent and child 
// and it only selects the direct children of an element 

ul > a {
    text-decoration: none; /* this does not work on the ordered list a few lines above*/
}

ul > li > a {
    text-decoration: none; /* this does work on the ordered list a few lines above*/
}

// ------------------------- Class Selector -------------------------

// Classes are used to group elements together that you want to have the same styling properties
// They also help make our stylesheets more readable
// Use a . to reference a class selector

// An element may have more than one class name separated by a space. 
// class="first-class-name second-class-name"

<section>This is a normal section</section>

<section class="bg-grey">This section has a greyish background</section>

<header class="bg-grey">This header also has a greyish background</header>

.bg-grey {
    background-color: whitesmoke;
}

// There are AND class selectors and OR class selectors

// ------------------------- ID Selector -------------------------

// ID attributes should be unique to their element and selecting elements by their ID can be helpful for unique styling
// Use a # to reference an ID selector 

<span id="banana">This span has a banana color</span>

#banana {
    color: yellow;
}

// ------------------------- Universal Selector -------------------------

// These are rarely necessary because it is usually too broad
// Use a * to make an universal selector 

* {
    border: 1px solid red; /* puts a red border around EVERY element */
}

// ========================= Overspecificity =========================

// In order to override properties of a high-specificity selector, you must use an even more specific selector
// You can add !important to a CSS property to make it override any other styling
// You should question anyone using it in a non-testing scenario

header {
    min-width: 500px !important; /* sets the min-width of the header to 500px regardless of any other styling rules */
}

// ========================= Precedence =========================

// The more specific a selector, the greater the precedence
// Here is a list of selectors in decreasing precedence
// Selectors can be combined to increase precedence. for example using an element and class selector together
// You can add a comma between selectors to act as an OR statement
    // i.e .class1,
          .class2 { property: value; }

// !important
// inline styles
// ID selectors
// class/attributes/pseudo-classes selectors
// element/pseudo-elements selectors
// universal selectors

// [[[[[[[[[[[[[[[[[[[[[[[[[ Advanced Selectors ]]]]]]]]]]]]]]]]]]]]]]]]]

// https://open.appacademy.io/learn/swe-in-person/software-engineering-foundations/css-advanced-selectors

// ========================= Attribute Selectors =========================

// We can target elements with certain attributes by using []

input[type="radio"] {
    -webkit-appearance: none;
    width: 27px;
    height: 27px;
    cursor: pointer;
    background-image: url(../assets/stars.png);
    vertical-align: bottom;
    outline: none;
}

// The -webkit-appearance property is native to the Webkit rendering engine used by Safari and Chrome
// The -webkit- part of the property is called a vendor prefix, which declares that this CSS property 
// is not yet declared by CSS W3 standards
// Other vendor prefixes include -moz- for Firefox, -o- for opera, -ms- for IE 

// The outline property is set to none to reset the default browser action of outlining the radio button in blue 
// It may be better for that selector to be in a css_reset.css file if we wanted to do that for all radio buttons

// ========================= Pseudo Selectors =========================

// https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes

// ------------------------- State Selector -------------------------

input[type="radio"]:checked {
    background-position: 30px 30px;
}

input[type="submit"]:hover {
    -webkit-filter: brightness(90%);
}

// ========================= Structural Selectors =========================

// this will select every other table row element that is a descendant of a table element
// and apply a grayish background color

table tr:nth-of-type(2n) {
    background-color: whitesmoke;
}

// this could replace a header > img selector to permit more image elements in the header while 
// still applying a width to the first one 

header img:first-child {
    width: 100px
}

// ========================= Combinators =========================

// We've already seen some combinators like the selectors with a space to select descendants 
// or the > to select children

// We can also use SelectorA + SelectorB to select all SelectorB elements that immediately follow SelectorA elements 

// This example uses ~ combinator to select all <p> elements that follow and are within the same parent as any <div> elements

div ~ p {
    background-color: gold;
}

// [[[[[[[[[[[[[[[[[[[[[[[[[ Box Model ]]]]]]]]]]]]]]]]]]]]]]]]]

// https://codinglead.github.io/images/box-model.png

// Every element has these properties which are essentially spacings for the element 
// Margin
    // Border 
        // Padding 
            // Text/Content

// Margin is the space between other elements. It will overlap with other element's Margins
// Border is the border around the element 
// Padding is the space between the border and the Text/Content

// width and height properties only apply to the Text/Content 

// box-sizing: border-box;
// this property sizes the selected element to the border-box 

// [[[[[[[[[[[[[[[[[[[[[[[[[ Reset Stylesheet ]]]]]]]]]]]]]]]]]]]]]]]]]

// They are used to reset the default browser styling so there are no mysteries as to why an element looks the way it does
// Use the link tag to reference the reset CSS file as the first file linked

// $$$$$$$$$$$$$$$$$$$$$$$$$ W5D3 $$$$$$$$$$$$$$$$$$$$$$$$$

// [[[[[[[[[[[[[[[[[[[[[[[[[ Box Model ]]]]]]]]]]]]]]]]]]]]]]]]]

// Box Model: everything rendered is a box - it has a margin, border, & padding
    // changing margin, will not affect the size of the box, but the space between other boxes
    // changing border/padding will affect the size of the box 

// [[[[[[[[[[[[[[[[[[[[[[[[[ Display Property ]]]]]]]]]]]]]]]]]]]]]]]]]

// https://open.appacademy.io/learn/swe-in-person/sql/css-display-property-reading

//// display
// values: inline, block, inline-block, flex, and none 
// a CSS property that can be given to any selector

// Inline display types always keep their "line height" but may push away other elements horizontally
// allows elements to sit to its left and right. CANNOT have a set width and height
    // <span></span> has default inline styling

// Block elements do NOT respect "line height" and by default, take up all horizontal space 
    // <div></div> has default block styling

// Inline-block elements are a combination of block and inline elements. 
    // you can set width and height properties 

// None removes the content from visibility

// Flexbox Layout styles "Flex containers" that automatically calculate the sizes of their children
    // Flex Containers: properties of the parent
    // Flex Items: properties of the children

// display: flex
    // when this property is applied to the parent will make all children into Flex Items
    // by default, the direction of the elements are horizontal but they can be changed with 
        // flex-direction: column
    // other common flex properties are:
        // justify-content: flex-start, flex-end, center, space-between, space-around
        // align-items: flex-start, flex-end, center, stretch, baseline
        // flex-wrap: wrap 
        // flex: 1 100%

// [[[[[[[[[[[[[[[[[[[[[[[[[ Inherit ]]]]]]]]]]]]]]]]]]]]]]]]]

<article> 
    <p>yoyoyo</p>
<article>

article {
    color: red;
}

p {
    color: blue;
}

p {
    color: inherit;
}

// the p content will be red because inherit will look for the nearest parent with the same property

// [[[[[[[[[[[[[[[[[[[[[[[[[ Resets ]]]]]]]]]]]]]]]]]]]]]]]]]

// Browsers may have default styling properties and most of the time, we don't want that.
// We want to reset those properties so that we have full control over our styling. 

// This is a good default reset styling to follow

html, body, etc {
    margin: 0;
    border: 0;
    padding: 0;

    font: inherit;
    text-align: inherit;
    text-decoration: inherit;
    color: inherit;

    background: transparent;
}

// [[[[[[[[[[[[[[[[[[[[[[[[[ Float and Clearfix ]]]]]]]]]]]]]]]]]]]]]]]]]

// https://open.appacademy.io/learn/swe-in-person/sql/css-float-and-clearfix-reading

<article class="clearfix"> 
    <img src="cat.jpg" alt="Cat">
</article>

img {
    float: left;
}

.clearfix::after {
    content: "";
    display: block;
    clear: both;
}

//// float 
// values: left, right, none, inherit
// this property lets the element float over other objects, while remaining in place despite other
// elements moving around. floated elements will stack next to each other as long as they fit before 
// moving to the next row

//// clear 
// values: left, right, none, inherit
// this property will prevent a floating element from floating over the element
// apply this to a pseudo-class selector to inject empty content :after an element to clear the float

// [[[[[[[[[[[[[[[[[[[[[[[[[ Flexbox and Grid System ]]]]]]]]]]]]]]]]]]]]]]]]]

// https://open.appacademy.io/learn/swe-in-person/sql/css-flexbox

// https://open.appacademy.io/learn/swe-in-person/sql/css-grid-system

// [[[[[[[[[[[[[[[[[[[[[[[[[ Lecture ]]]]]]]]]]]]]]]]]]]]]]]]]

// head contains the metadata about the html document that isnt visible to the user 

//// margin: 0 auto;
// automatically centers the element in the page - 0 top and bottom auto sizing left and right

//// border-radius: 100%
// turns element into circle. percentage refers to the corners of the box - lower % will look like
// a rectangle with round corners

// $$$$$$$$$$$$$$$$$$$$$$$$$ W7D4 $$$$$$$$$$$$$$$$$$$$$$$$$

// [[[[[[[[[[[[[[[[[[[[[[[[[ Responsive Design ]]]]]]]]]]]]]]]]]]]]]]]]]

// ========================= Media Query =========================

// A media query is a wrapper for CSS code that tests if the device running it 
    // meets one or more criteria (commonly, screen width). We can also query screen
    // orientation and pixel density. 

// CSS supports many media types. Screen and print being two of them
// screen = computer screen. print = printer

@media screen and (min-width: 480px) {
    
}

// if type isnt specified, the default is all
@media (min-width: 480px) {

}

// You can also use AND or OR logic 
@media (min-width: 480px) and (max-width: 980px) {
    // Selectors and their styles to apply when 480px <= screen_width <= 980px,
    // perhaps a good range for tablets
}

@media (max-width: 600px), (min-width: 800px) {
    // Selectors and their styles to apply when screen width is <= 600px or >= 800px
}

// It is better to start with a mobile-first approach because this way you can have
    // defaults outside of the media query and then add more styles for larger screens

// MOBILE-FIRST
.column {
    width: 100% ;
}

@media (min-width: 760px) {
    .column {
        float: left;
        width: 50% ;
    }
}
// DESKTOP-FIRST

@media (max-width: 760px) {
    .column {
        float: none;
        width: 100% ;
    }
}

// ========================= Viewport Meta Tag =========================

<meta name="viewport" content="width=device-width, initial-scale=1" />

// Mobile browsers will pretend they are much wider than they really are in order
    // to let the user zoom in to browse the website. The viewport meta tag will
    // prevent this and use the device's real width. 

// ========================= Reset =========================

/* PHASE 0: Reset */

html, head, body, header,
nav, h1, a, ul, li, main,
section, p, footer, small {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  font: inherit;
  color: inherit;
  text-align: inherit;
  text-decoration: inherit;
  vertical-align: inherit;
  box-sizing: inherit;
  background: transparent;
}

header, nav, main, section,
footer, small {
  display: block;
}

ul {
  list-style: none;
}

/* Clearfix */

.group:after {
  content: "";
  display: block;
  clear: both;
}

// [[[[[[[[[[[[[[[[[[[[[[[[[ Lecture ]]]]]]]]]]]]]]]]]]]]]]]]]

// ========================= Position Property =========================

// Static 
    // Default positioning and flow of elements
    // not affected by the top, bottom, left, and right properties
    // elements flow around each other
    // elements take up space 

// Relative 
    // relative to where it would otherwise be 
    // moving it visually but not physically on the page
    // flow remains the same 
    // uses top/bottom/left/right properties 

// Absolute 
    // positions relative to the nearest non-static ancestor 
        // uses the document if all ancestors are static
    // no longer takes up space in the page 
    // moving it visually and physically removing it from the page 
    // uses top/bottom/left/right properties 

// Fixed
    // same as absolute but relative to the viewport 
    // remains in the same place regardless of scroll
    // commonly used for navbars 

// Sticky 
    // hybrid of relative and fixed 
    // changes behavior based on scroll position 
    // always takes original space in document flow (like relative)
    // uses top/bottom/left/right properties to determine when to "stick"
    // MUST use at least one of the above properties
    // acts like fixed (placed relative to viewport) while "stuck"

// ========================= Dropdowns =========================

// Hover effect on an element displays a "dropdown" list of elements 
// In reality, elements are merely hidden until the hover effect changes 
    // display: none ==> display: block 
// The list of elements appears on top of the rest of the page due to position: absolute

// Give dropdown container (class="dropdown")
    // position: relative

// Give dropdown content (class="dropdown-content")
    // display: none;
    // position: absolute;

// Change dropdown content to display when hovered
.dropdown:hover .dropdown-content {
    display: block; 
}

// For extra styling 
.dropdown-content > li:hover {
    background-color: gray;
}
.dropdown:hover {
    cursor: pointer;
}

// ========================= Transform =========================

// Tranform can take in many different values with different effects

// scale(): Affects the size of the element. This also applies to the font-size,
    // padding, height, and width of an element, too. It’s also a a shorthand
    // function for the scaleX and scaleY functions.
// skewX() and skewY(): Tilts an element to the left or right, like turning a
    // rectangle into a parallelogram. skew() is a shorthand that combines skewX()
    // and skewY by accepting both values.
// translate(): Moves an element sideways or up and down.
// rotate(): Rotates the element clockwise from its current position.
// matrix(): A function that is probably not intended to be written by hand, but
    // combines all transforms into one.
// perspective(): Doesn’t affect the element itself, but affects the transforms
    // of descendent elements’ 3D transforms, allowing them all to have a consistent
    // depth perspective.